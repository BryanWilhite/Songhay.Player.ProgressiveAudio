{"version":3,"file":"progressive-audio-utility.js","sourceRoot":"","sources":["../progressive-audio-utility.ts"],"names":[],"mappings":"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","sourcesContent":["import { WindowAnimation } from 'songhay';\n\nexport class ProgressiveAudioUtility {\n\n    static playAnimation: WindowAnimation | null = null;\n\n    // noinspection JSUnusedGlobalSymbols\n    static async handleAudioMetadataLoadedAsync(instance: DotNet.DotNetObject, audio: HTMLAudioElement | null) : Promise<void> {\n        await ProgressiveAudioUtility.invokeDotNetMethodAsync(instance, audio);\n    }\n\n    static async invokeDotNetMethodAsync(instance: DotNet.DotNetObject, audio: HTMLAudioElement | null) : Promise<void> {\n        let data : {} | null = null;\n\n        try {\n            data = {\n                animationStatus: ProgressiveAudioUtility.playAnimation?.getDiagnosticStatus(),\n                audioCurrentTime: audio?.currentTime,\n                audioDuration: audio?.duration,\n                audioReadyState: audio?.readyState,\n                isAudioPaused: audio?.paused\n            };\n\n            await instance?.invokeMethodAsync(\n                'animateAsync',\n                data\n            );\n        } catch (error) {\n            console.error({ error, instance, data });\n            WindowAnimation.cancelAnimation();\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    static loadAudioTrack(audio: HTMLAudioElement | null, src: string) : void {\n        audio?.setAttribute('src', src);\n        audio?.load();\n    }\n\n    static setAudioCurrentTime(input: HTMLInputElement | null, audio: HTMLAudioElement | null) : void {\n        if(audio && input) {\n            audio.currentTime = parseFloat(input.value);\n            audio.dataset.hasSetCurrentTime = 'yes';\n        }\n        console.info('setAudioCurrentTime',\n            {\n                readyState: audio?.readyState,\n                paused: audio?.paused,\n                currentTime: audio?.currentTime,\n                hasSetCurrentTime: audio?.dataset.hasSetCurrentTime,\n                inputValue: input?.value\n            }\n        );\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    static async startPlayAnimationAsync(instance: DotNet.DotNetObject, audio: HTMLAudioElement | null) : Promise<void> {\n        const fps: number = 1; // frames per second\n\n        if(audio && audio.readyState > 2 && audio.paused) {\n            await audio.play();\n        }\n        else if (audio && audio.dataset.hasSetCurrentTime === 'yes') {\n            await audio.play();\n            audio.dataset.hasSetCurrentTime = 'no';\n            console.info('startPlayAnimationAsync',\n                {\n                    readyState: audio?.readyState,\n                    paused: audio?.paused,\n                    currentTime: audio?.currentTime,\n                    hasSetCurrentTime: audio?.dataset.hasSetCurrentTime,\n                    audio\n                }\n            );\n        }\n        else {\n            console.error('The audio could not play!',\n                'startPlayAnimationAsync',\n                {\n                    readyState: audio?.readyState,\n                    paused: audio?.paused,\n                    currentTime: audio?.currentTime,\n                    hasSetCurrentTime: audio?.dataset.hasSetCurrentTime,\n                    audio\n                }\n            );\n        }\n\n        ProgressiveAudioUtility.playAnimation = WindowAnimation.registerAndGenerate(fps, async _ => {\n\n            if(audio?.ended) { console.warn('ended?');\n                audio.currentTime = 0;\n\n                await ProgressiveAudioUtility.stopPlayAnimationAsync(instance, audio);\n\n                return;\n            }\n\n            await ProgressiveAudioUtility.invokeDotNetMethodAsync(instance, audio);\n        });\n\n        WindowAnimation.animate();\n    }\n\n    static async stopPlayAnimationAsync(instance: DotNet.DotNetObject, audio: HTMLAudioElement | null): Promise<void> {\n\n        if(audio && audio.readyState > 0 && !audio.paused) { audio.pause(); }\n\n        await ProgressiveAudioUtility.invokeDotNetMethodAsync(instance, audio);\n\n        WindowAnimation.cancelAnimation(ProgressiveAudioUtility.playAnimation?.id ?? undefined);\n\n        console.info('stopPlayAnimationAsync',\n            {\n                readyState: audio?.readyState,\n                paused: audio?.paused,\n                currentTime: audio?.currentTime,\n                hasSetCurrentTime: audio?.dataset.hasSetCurrentTime,\n                audio\n            }\n        );\n    }\n}\n"]}