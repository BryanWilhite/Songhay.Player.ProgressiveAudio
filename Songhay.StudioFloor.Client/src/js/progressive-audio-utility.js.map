{"version":3,"file":"progressive-audio-utility.js","sourceRoot":"","sources":["../progressive-audio-utility.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,SAAS,CAAC;AAE1C,MAAM,OAAO,uBAAuB;IAIhC,qCAAqC;IACrC,MAAM,CAAC,sBAAsB;QACzB,OAAO,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,0DAA0D,CAAC,CAAC;IACrG,CAAC;IAED,qCAAqC;IACrC,MAAM,CAAO,8BAA8B,CAAC,QAA6B;;YACrE,MAAM,uBAAuB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;QACpE,CAAC;KAAA;IAED,MAAM,CAAO,uBAAuB,CAAC,QAA6B;;;YAC9D,IAAI,IAAI,GAAe,IAAI,CAAC;YAE5B,MAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAE5C,IAAI;gBACA,IAAI,GAAG;oBACH,eAAe,EAAE,MAAA,uBAAuB,CAAC,aAAa,0CAAE,mBAAmB,EAAE;oBAC7E,gBAAgB,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW;oBACpC,aAAa,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ;oBAC9B,eAAe,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU;oBAClC,aAAa,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM;iBAC/B,CAAC;gBAEF,MAAM,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,iBAAiB,CAC7B,cAAc,EACd,IAAI,CACP,CAAA,CAAC;aACL;YAAC,OAAO,KAAK,EAAE;gBACZ,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;gBACzC,eAAe,CAAC,eAAe,EAAE,CAAC;aACrC;;KACJ;IAED,MAAM,CAAC,mBAAmB,CAAC,KAA8B;QACrD,MAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAE5C,IAAG,KAAK,IAAI,KAAK,EAAE;YACf,KAAK,CAAC,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC/C;QACD,IAAG,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW,MAAK,CAAC,EAC3B;YACI,OAAO,CAAC,IAAI,CAAC,qBAAqB,EAC9B;gBACI,UAAU,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU;gBAC7B,MAAM,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM;gBACrB,WAAW,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW;gBAC/B,UAAU,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK;aAC3B,CACJ,CAAC;SACL;IACL,CAAC;IAED,qCAAqC;IACrC,MAAM,CAAO,uBAAuB,CAAC,QAA6B;;YAC9D,MAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC5C,MAAM,GAAG,GAAW,CAAC,CAAC,CAAC,oBAAoB;YAE3C,IAAG,KAAK,IAAI,KAAK,CAAC,UAAU,GAAG,CAAC,IAAI,KAAK,CAAC,MAAM,EAAE;gBAC9C,MAAM,KAAK,CAAC,IAAI,EAAE,CAAC;aACtB;iBACI;gBACD,OAAO,CAAC,KAAK,CAAC,2BAA2B,EACrC,yBAAyB,EACzB;oBACI,UAAU,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU;oBAC7B,MAAM,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM;oBACrB,WAAW,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW;oBAC/B,iBAAiB,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,CAAC,iBAAiB;oBACnD,KAAK;iBACR,CACJ,CAAC;aACL;YAED,uBAAuB,CAAC,aAAa,GAAG,eAAe,CAAC,mBAAmB,CAAC,GAAG,EAAE,CAAM,CAAC,EAAC,EAAE;gBAEvF,IAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,EAAE;oBAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;oBACtC,KAAK,CAAC,WAAW,GAAG,CAAC,CAAC;oBAEtB,MAAM,uBAAuB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;oBAE/D,OAAO;iBACV;gBAED,MAAM,uBAAuB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YACpE,CAAC,CAAA,CAAC,CAAC;YAEH,eAAe,CAAC,OAAO,EAAE,CAAC;QAC9B,CAAC;KAAA;IAED,MAAM,CAAO,sBAAsB,CAAC,QAA6B;;;YAC7D,MAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAE5C,IAAG,KAAK,IAAI,KAAK,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBAAE,KAAK,CAAC,KAAK,EAAE,CAAC;aAAE;YAErE,MAAM,uBAAuB,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;YAEhE,eAAe,CAAC,eAAe,CAAC,MAAA,MAAA,uBAAuB,CAAC,aAAa,0CAAE,EAAE,mCAAI,SAAS,CAAC,CAAC;YAExF,OAAO,CAAC,IAAI,CAAC,wBAAwB,EACjC;gBACI,UAAU,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,UAAU;gBAC7B,MAAM,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM;gBACrB,WAAW,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW;gBAC/B,KAAK;aACR,CACJ,CAAC;;KACL;;AA7GM,qCAAa,GAA2B,IAAI,CAAC","sourcesContent":["import { WindowAnimation } from 'songhay';\n\nexport class ProgressiveAudioUtility {\n\n    static playAnimation: WindowAnimation | null = null;\n\n    // noinspection JSUnusedGlobalSymbols\n    static getCurrentAudioElement() : HTMLAudioElement | null {\n        return window.document.querySelector('#audio-player-container>audio[data-track-is-active=true]');\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    static async handleAudioMetadataLoadedAsync(instance: DotNet.DotNetObject) : Promise<void> {\n        await ProgressiveAudioUtility.invokeDotNetMethodAsync(instance);\n    }\n\n    static async invokeDotNetMethodAsync(instance: DotNet.DotNetObject) : Promise<void> {\n        let data : {} | null = null;\n\n        const audio = this.getCurrentAudioElement();\n\n        try {\n            data = {\n                animationStatus: ProgressiveAudioUtility.playAnimation?.getDiagnosticStatus(),\n                audioCurrentTime: audio?.currentTime,\n                audioDuration: audio?.duration,\n                audioReadyState: audio?.readyState,\n                isAudioPaused: audio?.paused\n            };\n\n            await instance?.invokeMethodAsync(\n                'animateAsync',\n                data\n            );\n        } catch (error) {\n            console.error({ error, instance, data });\n            WindowAnimation.cancelAnimation();\n        }\n    }\n\n    static setAudioCurrentTime(input: HTMLInputElement | null) : void {\n        const audio = this.getCurrentAudioElement();\n\n        if(audio && input) {\n            audio.currentTime = parseFloat(input.value);\n        }\n        if(audio?.currentTime === 0)\n        {\n            console.info('setAudioCurrentTime',\n                {\n                    readyState: audio?.readyState,\n                    paused: audio?.paused,\n                    currentTime: audio?.currentTime,\n                    inputValue: input?.value\n                }\n            );\n        }\n    }\n\n    // noinspection JSUnusedGlobalSymbols\n    static async startPlayAnimationAsync(instance: DotNet.DotNetObject) : Promise<void> {\n        const audio = this.getCurrentAudioElement();\n        const fps: number = 1; // frames per second\n\n        if(audio && audio.readyState > 2 && audio.paused) {\n            await audio.play();\n        }\n        else {\n            console.error('The audio could not play!',\n                'startPlayAnimationAsync',\n                {\n                    readyState: audio?.readyState,\n                    paused: audio?.paused,\n                    currentTime: audio?.currentTime,\n                    hasSetCurrentTime: audio?.dataset.hasSetCurrentTime,\n                    audio\n                }\n            );\n        }\n\n        ProgressiveAudioUtility.playAnimation = WindowAnimation.registerAndGenerate(fps, async _ => {\n\n            if(audio?.ended) { console.warn('ended?');\n                audio.currentTime = 0;\n\n                await ProgressiveAudioUtility.stopPlayAnimationAsync(instance);\n\n                return;\n            }\n\n            await ProgressiveAudioUtility.invokeDotNetMethodAsync(instance);\n        });\n\n        WindowAnimation.animate();\n    }\n\n    static async stopPlayAnimationAsync(instance: DotNet.DotNetObject): Promise<void> {\n        const audio = this.getCurrentAudioElement();\n\n        if(audio && audio.readyState > 0 && !audio.paused) { audio.pause(); }\n\n        await ProgressiveAudioUtility.invokeDotNetMethodAsync(instance);\n\n        WindowAnimation.cancelAnimation(ProgressiveAudioUtility.playAnimation?.id ?? undefined);\n\n        console.info('stopPlayAnimationAsync',\n            {\n                readyState: audio?.readyState,\n                paused: audio?.paused,\n                currentTime: audio?.currentTime,\n                audio\n            }\n        );\n    }\n}\n"]}